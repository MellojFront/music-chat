console.log('üöÄ –ó–∞–ø—É—Å–∫ Music Chat —Å–µ—Ä–≤–µ—Ä–∞...');

const http = require('http');
const path = require('path');
const fs = require('fs');

// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º–æ–¥—É–ª—å ws —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
let WebSocket;
try {
  WebSocket = require('ws');
  console.log('‚úÖ –ú–æ–¥—É–ª—å ws –Ω–∞–π–¥–µ–Ω');
} catch (err) {
  console.error('‚ùå –ú–æ–¥—É–ª—å ws –Ω–µ –Ω–∞–π–¥–µ–Ω!');
  console.error('üí° –í—ã–ø–æ–ª–Ω–∏: npm install ws');
  process.exit(1);
}

const server = http.createServer((req, res) => {
  console.log(`üì• ${req.method} ${req.url}`);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  let filePath;
  if (req.url === '/') {
    filePath = path.join(__dirname, 'public', 'index.html');
  } else {
    filePath = path.join(__dirname, 'public', req.url);
  }
  
  const extname = path.extname(filePath);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  let contentType = 'text/html; charset=utf-8';
  switch (extname) {
    case '.css': contentType = 'text/css'; break;
    case '.js': contentType = 'text/javascript'; break;
    case '.json': contentType = 'application/json'; break;
  }

  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
  fs.readFile(filePath, (err, content) => {
    if (err) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
      res.end(`
        <h1>404 - –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p>–ü—É—Ç—å: ${filePath}</p>
        <p><a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
      `);
    } else {
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${path.basename(filePath)}`);
      res.writeHead(200, { 'Content-Type': contentType });
      res.end(content);
    }
  });
});

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
let wss;
try {
  wss = new WebSocket.Server({ server });
  console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω');
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞:', err);
  process.exit(1);
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const rooms = {
  'melodic-techno': { users: new Set(), messages: [] },
  'ambient': { users: new Set(), messages: [] },
  'house': { users: new Set(), messages: [] },
  'drum-and-bass': { users: new Set(), messages: [] },
  'general': { users: new Set(), messages: [] }
};

console.log('‚úÖ –ö–æ–º–Ω–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:', Object.keys(rooms));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
function broadcastToRoom(roomName, message, excludeWs = null) {
  if (rooms[roomName]) {
    let sentCount = 0;
    rooms[roomName].users.forEach(ws => {
      if (ws !== excludeWs && ws.readyState === WebSocket.OPEN) {
        try {
          ws.send(JSON.stringify(message));
          sentCount++;
        } catch (err) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
      }
    });
    if (sentCount > 0) {
      console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${sentCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ ${roomName}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function sendUserList(roomName) {
  if (rooms[roomName]) {
    const userList = Array.from(rooms[roomName].users)
      .filter(ws => ws.username && ws.readyState === WebSocket.OPEN)
      .map(ws => ws.username);
    
    broadcastToRoom(roomName, {
      type: 'userList',
      users: userList
    });
    
    console.log(`üë• –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ${roomName}:`, userList);
  }
}

wss.on('connection', (ws) => {
  console.log('üîó –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  
  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data.toString());
      console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', message.type);
      
      switch (message.type) {
        case 'join':
          // –£–¥–∞–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
          if (ws.currentRoom && rooms[ws.currentRoom]) {
            rooms[ws.currentRoom].users.delete(ws);
            sendUserList(ws.currentRoom);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
          ws.username = message.username;
          ws.currentRoom = message.room;
          
          if (rooms[message.room]) {
            rooms[message.room].users.add(ws);
            console.log(`üë§ ${message.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ ${message.room}`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            const recentMessages = rooms[message.room].messages.slice(-10);
            recentMessages.forEach(msg => {
              try {
                ws.send(JSON.stringify(msg));
              } catch (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', err);
              }
            });
            
            // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const joinMessage = {
              type: 'system',
              message: `${message.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É`,
              timestamp: new Date().toISOString()
            };
            broadcastToRoom(message.room, joinMessage);
            
            sendUserList(message.room);
          } else {
            console.error(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${message.room} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          }
          break;
          
        case 'message':
          if (ws.currentRoom && rooms[ws.currentRoom] && ws.username) {
            const chatMessage = {
              type: 'message',
              username: ws.username,
              message: message.message,
              timestamp: new Date().toISOString()
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            rooms[ws.currentRoom].messages.push(chatMessage);
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if (rooms[ws.currentRoom].messages.length > 100) {
              rooms[ws.currentRoom].messages.shift();
            }
            
            console.log(`üí¨ ${ws.username} –≤ ${ws.currentRoom}: ${message.message}`);
            broadcastToRoom(ws.currentRoom, chatMessage);
          } else {
            console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–Ω–∞—Ç—ã –∏–ª–∏ –∏–º–µ–Ω–∏');
          }
          break;
          
        default:
          console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });
  
  ws.on('close', () => {
    if (ws.currentRoom && rooms[ws.currentRoom]) {
      rooms[ws.currentRoom].users.delete(ws);
      
      if (ws.username) {
        console.log(`üëã ${ws.username} –ø–æ–∫–∏–Ω—É–ª ${ws.currentRoom}`);
        
        const leaveMessage = {
          type: 'system',
          message: `${ws.username} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç`,
          timestamp: new Date().toISOString()
        };
        broadcastToRoom(ws.currentRoom, leaveMessage);
        sendUserList(ws.currentRoom);
      }
    }
    console.log('‚ùå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  });
  
  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
});

const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
const publicPath = path.join(__dirname, 'public');
fs.readdir(publicPath, (err, files) => {
  if (err) {
    console.error('‚ùå –ü–∞–ø–∫–∞ public –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    console.error('üí° –°–æ–∑–¥–∞–π –ø–∞–ø–∫—É public —Å —Ñ–∞–π–ª–∞–º–∏: index.html, style.css, script.js');
    return;
  }
  
  console.log('üìÅ –§–∞–π–ª—ã –≤ public:', files);
  
  const requiredFiles = ['index.html', 'style.css', 'script.js'];
  const missingFiles = requiredFiles.filter(file => !files.includes(file));
  
  if (missingFiles.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:', missingFiles);
    console.error('üí° –î–æ–±–∞–≤—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É public/');
  }
});

server.listen(PORT, '0.0.0.0', (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    return;
  }
  
  console.log('üéµ =====================================');
  console.log('üéµ  Music Chat Server –ó–ê–ü–£–©–ï–ù!');
  console.log('üéµ =====================================');
  console.log(`üåê URL: http://0.0.0.0:${PORT}`);
  console.log(`üìÅ –ü–∞–ø–∫–∞: ${publicPath}`);
  console.log('üéµ =====================================');
});

server.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  if (err.code === 'EADDRINUSE') {
    console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} –∑–∞–Ω—è—Ç!`);
    console.error('üí° –û—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ –∏–∑–º–µ–Ω–∏ –ø–æ—Ä—Ç');
  }
});